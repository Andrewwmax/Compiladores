options {
	DEBUG_PARSER = false;
	DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)
package parser;
import semantico.*;
import apoio.*;
import gerador.*;
import primitivo.*;
import java.io.*;

public class Compilador {
	static Tabela tabela = new Tabela();
	ListaComandosAltoNivel listaComandosAltoNivel = new ListaComandosAltoNivel();
	ListaComandosPrimitivos listaComandosPrimitivos = new ListaComandosPrimitivos();
	String codigoDestino = null;

	public static void main(String args[])  throws ParseException  {
		Compilador compilador = null;
		try {
//		  	Config.salvarEmDisco("exemplos/exemplo17.spc");
			compilador = new Compilador(new FileInputStream(Config.NOMEARQ));
			Compilador.inicio();

		}
		catch(FileNotFoundException e) {
			System.out.println(e.getMessage());
		}
		catch(TokenMgrError e) {
			System.out.println("Erro lexico\n" + e.getMessage());
		}
		catch(ParseException e) {
			System.out.println("Erro sint√°tico\n" + e.getMessage());
		}
		catch(ErroSemantico e) {
			System.out.println(e.getMessage());
		}
	}
}
PARSER_END(Compilador)

SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
	  <EXIBE: "exibe" >  
	| <LEITURA: "le" >
	| <SE: "se" >
	| <FIMSE: "fimse" >
	| <ENQUANTO: "enquanto" > 
	| <FIMENQUANTO: "fimenquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
	  <NUMERO: "numero" >
	| <PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
	  < #CHAR: ["a"-"z"] | ["A" - "Z"] >
	| < AP: "(" >
	| < FP: ")" >
	| < PV: ";" >
	| < VIRGULA: "," >
	| < STRING: "\"" (~["\""])* "\"" >
	| < VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	  < #DIGIT: ["0"-"9"] >
	| < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
	< SOMA: "+" >
	| < SUB: "-" >
	| < MUL: "*" >
	| < DIV: "/" >
	| < OU: "OR" >
	| < ATRIB: "<-" >
	| < IGUAL: "=" >
	| < CONCAT: "&" > 
}

/******************************************************************/
void inicio() : {} {
	programa() <EOF>
}

void programa() : {} {
	( comando() )*
}

void comando() : {} {
	  atribuicao()
	| declaracao()
	| se()
	| enquanto()
	| le()
	| exibe()
}

void atribuicao() : {Token t;} {
	t = <VAR> {
		AcoesSemanticas.verificarInicializacao(tabela, t.image, t.endLine);
	} <ATRIB> expressao() <PV>
}

void declaracao() : {Token t; TipoDado tipo;} { 
	( <NUMERO> { tipo = TipoDado.NUM; } 
	| <PALAVRA> { tipo = TipoDado.STR; } ) 
	
	t = <VAR> {
		tabela = Tabela.adicionarTabela(tabela, t, tipo, t.endLine);
	}
	( <ATRIB> expressao() )? 
	( <VIRGULA> t = <VAR> {
			tabela = Tabela.adicionarTabela(tabela, t, tipo, t.endLine);
		}
		( <ATRIB> expressao() )? 
	)* <PV> 
}

void se() : {} {

	<SE> <AP> expressao() <FP> programa() <FIMSE>
}

void enquanto() : {} {

	<ENQUANTO> <AP> expressao() <FP> programa() <FIMENQUANTO>
}

void le() : {Token t;} {
	<LEITURA> t = <VAR> {
		AcoesSemanticas.verificarInicializacao(tabela, t.image, t.endLine);
	}
	( <VIRGULA> t = <VAR> {
		AcoesSemanticas.verificarInicializacao(tabela, t.image, t.endLine);
	} )* <PV>
}

void exibe() : {} {

	<EXIBE> expressao() ( <VIRGULA> expressao() )* <PV>
}

void expressao() : {Expressao expressao = new Expressao();} {
	expressaoAuxiliar(expressao) { 
		System.out.println(expressao.getListaExpressaoPosFixa().toString());
	}
}

void expressaoAuxiliar(Expressao expressao) : {Token t; Item item; } {
	termo(expressao)(t = <OU> termo(expressao) {
		expressao.addItemPosfixo(item = new Operador(t, TipoOperador.OU));
	} )*
}
void termo(Expressao expressao) : {Token t; Item item; } {
	termo1(expressao) (t = <IGUAL> termo1(expressao) {
		expressao.addItemPosfixo(item = new Operador(t, TipoOperador.IGUAL));
	} )?
}

void termo1(Expressao expressao) : {Token t; Item item;} {
	termo2(expressao) (t = <CONCAT> termo2(expressao) {
		expressao.addItemPosfixo(item = new Operador(t, TipoOperador.CONCAT));
	} )*
}

void termo2(Expressao expressao) : {Token t; Item item;} {
	termo3(expressao) ((t = <SOMA> | t = <SUB>) termo3(expressao) {
		expressao.addItemPosfixo(item = new Operador(t, t.equals(TipoOperador.ADD) ? TipoOperador.ADD : TipoOperador.SUB));
	} )*
}

void termo3(Expressao expressao) : {Token t; Item item;} {
	termo4(expressao) ((t = <MUL> | t = <DIV>) termo4(expressao) {
		expressao.addItemPosfixo(item = new Operador(t, t.equals(TipoOperador.MUL) ? TipoOperador.MUL : TipoOperador.DIV));
	} )*
}

void termo4(Expressao expressao) : {Token t; Token tipo; Token valor; Token sinal; Item item;} {
	<AP> expressaoAuxiliar(expressao) <FP>
	| valor = <NUM> {
		expressao.addItemPosfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
	}
	| sinal = <SOMA> valor = <NUM> {
		expressao.addItemPosfixo(item = new Operador(sinal, TipoOperador.ADD));
		expressao.addItemPosfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
	}
	| sinal = <SUB> valor = <NUM> {
		expressao.addItemPosfixo(item = new Operador(sinal, TipoOperador.SUB));
		expressao.addItemPosfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
	}
	| t = <VAR> {
		System.out.println(tabela.toString());
		AcoesSemanticas.verificarInicializacao(tabela, t.image, t.endLine);
		expressao.addItemPosfixo(item = new Operando(t, tabela.consultaTipo(t.image), TipoElemento.CTE));
	}
	| valor = <STRING> {
		expressao.addItemPosfixo(item = new Operando(valor, TipoDado.STR, TipoElemento.CTE));
	}
}
